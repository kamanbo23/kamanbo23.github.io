{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{authService}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const AuthProvider=_ref=>{let{children}=_ref;const[token,setToken]=useState(localStorage.getItem('token'));const[isAuthenticated,setIsAuthenticated]=useState(!!token);const[userType,setUserType]=useState(localStorage.getItem('userType')||null);const[userData,setUserData]=useState(JSON.parse(localStorage.getItem('userData'))||null);const[isLoading,setIsLoading]=useState(false);useEffect(()=>{if(token){localStorage.setItem('token',token);setIsAuthenticated(true);}else{localStorage.removeItem('token');localStorage.removeItem('userType');localStorage.removeItem('userData');setIsAuthenticated(false);setUserType(null);setUserData(null);}},[token]);useEffect(()=>{if(userType){localStorage.setItem('userType',userType);}},[userType]);useEffect(()=>{if(userData){localStorage.setItem('userData',JSON.stringify(userData));}},[userData]);// Load user profile when authenticated\nuseEffect(()=>{const fetchUserProfile=async()=>{if(isAuthenticated&&userType==='user'&&token){try{const response=await authService.getCurrentUser();if(response.status===200){setUserData(response.data);}}catch(error){console.error('Error fetching user profile:',error);}}};fetchUserProfile();},[isAuthenticated,userType,token]);const login=async(usernameOrEmail,password)=>{setIsLoading(true);try{const response=await authService.login(usernameOrEmail,password);const data=response.data;if(data.access_token){setToken(data.access_token);setUserType(data.user_type);// If user, fetch profile data\nif(data.user_type==='user'){const profileResponse=await authService.getCurrentUser();if(profileResponse.status===200){setUserData(profileResponse.data);}}else{// For admin, just store basic info\nsetUserData({username:data.username});}setIsAuthenticated(true);setIsLoading(false);return true;}throw new Error('No access token received');}catch(error){console.error('Login error:',error);setIsLoading(false);throw error;}};const register=async(email,username,password,fullName)=>{setIsLoading(true);try{const userData={email,username,password,full_name:fullName};const response=await authService.register(userData);setIsLoading(false);return response.data;}catch(error){console.error('Registration error:',error);setIsLoading(false);throw error;}};const updateProfile=async updateData=>{setIsLoading(true);try{const response=await authService.updateProfile(updateData);if(response.status===200){setUserData(response.data);setIsLoading(false);return response.data;}throw new Error('Profile update failed');}catch(error){console.error('Profile update error:',error);setIsLoading(false);throw error;}};const saveEvent=async eventId=>{if(!isAuthenticated||!token||userType!=='user'){throw new Error('Not authenticated as user');}try{await authService.saveEvent(eventId);const profileResponse=await authService.getCurrentUser();if(profileResponse.status===200){setUserData(profileResponse.data);}return true;}catch(error){console.error('Save event error:',error);throw error;}};const saveOpportunity=async opportunityId=>{if(!isAuthenticated||!token||userType!=='user'){throw new Error('Not authenticated as user');}try{await authService.saveOpportunity(opportunityId);const profileResponse=await authService.getCurrentUser();if(profileResponse.status===200){setUserData(profileResponse.data);}return true;}catch(error){console.error('Save opportunity error:',error);throw error;}};const logout=()=>{setToken(null);setIsAuthenticated(false);setUserType(null);setUserData(null);};// Calculate isAdmin and isUser properties\nconst isAdmin=userType==='admin';const isUser=userType==='user';return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{token,isAuthenticated,userType,userData,isLoading,isAdmin,isUser,login,logout,register,updateProfile,saveEvent,saveOpportunity},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authService","jsx","_jsx","AuthContext","AuthProvider","_ref","children","token","setToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","userType","setUserType","userData","setUserData","JSON","parse","isLoading","setIsLoading","setItem","removeItem","stringify","fetchUserProfile","response","getCurrentUser","status","data","error","console","login","usernameOrEmail","password","access_token","user_type","profileResponse","username","Error","register","email","fullName","full_name","updateProfile","updateData","saveEvent","eventId","saveOpportunity","opportunityId","logout","isAdmin","isUser","Provider","value","useAuth","context"],"sources":["/Users/lokesh/indeedforresearch.real/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authService } from '../services/api';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(!!token);\n  const [userType, setUserType] = useState(localStorage.getItem('userType') || null);\n  const [userData, setUserData] = useState(JSON.parse(localStorage.getItem('userData')) || null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (token) {\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n    } else {\n      localStorage.removeItem('token');\n      localStorage.removeItem('userType');\n      localStorage.removeItem('userData');\n      setIsAuthenticated(false);\n      setUserType(null);\n      setUserData(null);\n    }\n  }, [token]);\n\n  useEffect(() => {\n    if (userType) {\n      localStorage.setItem('userType', userType);\n    }\n  }, [userType]);\n\n  useEffect(() => {\n    if (userData) {\n      localStorage.setItem('userData', JSON.stringify(userData));\n    }\n  }, [userData]);\n\n  // Load user profile when authenticated\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (isAuthenticated && userType === 'user' && token) {\n        try {\n          const response = await authService.getCurrentUser();\n          if (response.status === 200) {\n            setUserData(response.data);\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      }\n    };\n\n    fetchUserProfile();\n  }, [isAuthenticated, userType, token]);\n\n  const login = async (usernameOrEmail, password) => {\n    setIsLoading(true);\n    try {\n      const response = await authService.login(usernameOrEmail, password);\n      \n      const data = response.data;\n      if (data.access_token) {\n        setToken(data.access_token);\n        setUserType(data.user_type);\n        \n        // If user, fetch profile data\n        if (data.user_type === 'user') {\n          const profileResponse = await authService.getCurrentUser();\n          if (profileResponse.status === 200) {\n            setUserData(profileResponse.data);\n          }\n        } else {\n          // For admin, just store basic info\n          setUserData({ username: data.username });\n        }\n        \n        setIsAuthenticated(true);\n        setIsLoading(false);\n        return true;\n      }\n      \n      throw new Error('No access token received');\n    } catch (error) {\n      console.error('Login error:', error);\n      setIsLoading(false);\n      throw error;\n    }\n  };\n\n  const register = async (email, username, password, fullName) => {\n    setIsLoading(true);\n    try {\n      const userData = {\n        email,\n        username,\n        password,\n        full_name: fullName\n      };\n      \n      const response = await authService.register(userData);\n      setIsLoading(false);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      setIsLoading(false);\n      throw error;\n    }\n  };\n\n  const updateProfile = async (updateData) => {\n    setIsLoading(true);\n    try {\n      const response = await authService.updateProfile(updateData);\n      if (response.status === 200) {\n        setUserData(response.data);\n        setIsLoading(false);\n        return response.data;\n      }\n      throw new Error('Profile update failed');\n    } catch (error) {\n      console.error('Profile update error:', error);\n      setIsLoading(false);\n      throw error;\n    }\n  };\n\n  const saveEvent = async (eventId) => {\n    if (!isAuthenticated || !token || userType !== 'user') {\n      throw new Error('Not authenticated as user');\n    }\n    \n    try {\n      await authService.saveEvent(eventId);\n      const profileResponse = await authService.getCurrentUser();\n      if (profileResponse.status === 200) {\n        setUserData(profileResponse.data);\n      }\n      return true;\n    } catch (error) {\n      console.error('Save event error:', error);\n      throw error;\n    }\n  };\n\n  const saveOpportunity = async (opportunityId) => {\n    if (!isAuthenticated || !token || userType !== 'user') {\n      throw new Error('Not authenticated as user');\n    }\n    \n    try {\n      await authService.saveOpportunity(opportunityId);\n      const profileResponse = await authService.getCurrentUser();\n      if (profileResponse.status === 200) {\n        setUserData(profileResponse.data);\n      }\n      return true;\n    } catch (error) {\n      console.error('Save opportunity error:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setToken(null);\n    setIsAuthenticated(false);\n    setUserType(null);\n    setUserData(null);\n  };\n\n  // Calculate isAdmin and isUser properties\n  const isAdmin = userType === 'admin';\n  const isUser = userType === 'user';\n\n  return (\n    <AuthContext.Provider\n      value={{\n        token,\n        isAuthenticated,\n        userType,\n        userData,\n        isLoading,\n        isAdmin,\n        isUser,\n        login,\n        logout,\n        register,\n        updateProfile,\n        saveEvent,\n        saveOpportunity,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}