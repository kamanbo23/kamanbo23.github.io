{"ast":null,"code":"var _jsxFileName = \"/Users/lokesh/indeedforresearch.real/frontend/src/contexts/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(!!token);\n  const [userType, setUserType] = useState(localStorage.getItem('userType') || null);\n  const [userData, setUserData] = useState(JSON.parse(localStorage.getItem('userData')) || null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (token) {\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n    } else {\n      localStorage.removeItem('token');\n      localStorage.removeItem('userType');\n      localStorage.removeItem('userData');\n      setIsAuthenticated(false);\n      setUserType(null);\n      setUserData(null);\n    }\n  }, [token]);\n  useEffect(() => {\n    if (userType) {\n      localStorage.setItem('userType', userType);\n    }\n  }, [userType]);\n  useEffect(() => {\n    if (userData) {\n      localStorage.setItem('userData', JSON.stringify(userData));\n    }\n  }, [userData]);\n\n  // Load user profile when authenticated\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (isAuthenticated && userType === 'user' && token) {\n        try {\n          const response = await authService.getCurrentUser();\n          if (response.status === 200) {\n            setUserData(response.data);\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      }\n    };\n    fetchUserProfile();\n  }, [isAuthenticated, userType, token]);\n  const login = async (usernameOrEmail, password) => {\n    setIsLoading(true);\n    try {\n      const response = await authService.login(usernameOrEmail, password);\n      const data = response.data;\n      if (data.access_token) {\n        setToken(data.access_token);\n        setUserType(data.user_type);\n\n        // If user, fetch profile data\n        if (data.user_type === 'user') {\n          const profileResponse = await authService.getCurrentUser();\n          if (profileResponse.status === 200) {\n            setUserData(profileResponse.data);\n          }\n        } else {\n          // For admin, just store basic info\n          setUserData({\n            username: data.username\n          });\n        }\n        setIsAuthenticated(true);\n        setIsLoading(false);\n        return true;\n      }\n      throw new Error('No access token received');\n    } catch (error) {\n      console.error('Login error:', error);\n      setIsLoading(false);\n      throw error;\n    }\n  };\n  const register = async (email, username, password, fullName) => {\n    setIsLoading(true);\n    try {\n      const userData = {\n        email,\n        username,\n        password,\n        full_name: fullName\n      };\n      const response = await authService.register(userData);\n      setIsLoading(false);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      setIsLoading(false);\n      throw error;\n    }\n  };\n  const updateProfile = async updateData => {\n    setIsLoading(true);\n    try {\n      const response = await authService.updateProfile(updateData);\n      if (response.status === 200) {\n        setUserData(response.data);\n        setIsLoading(false);\n        return response.data;\n      }\n      throw new Error('Profile update failed');\n    } catch (error) {\n      console.error('Profile update error:', error);\n      setIsLoading(false);\n      throw error;\n    }\n  };\n  const saveEvent = async eventId => {\n    if (!isAuthenticated || !token || userType !== 'user') {\n      throw new Error('Not authenticated as user');\n    }\n    try {\n      await authService.saveEvent(eventId);\n      const profileResponse = await authService.getCurrentUser();\n      if (profileResponse.status === 200) {\n        setUserData(profileResponse.data);\n      }\n      return true;\n    } catch (error) {\n      console.error('Save event error:', error);\n      throw error;\n    }\n  };\n  const saveOpportunity = async opportunityId => {\n    if (!isAuthenticated || !token || userType !== 'user') {\n      throw new Error('Not authenticated as user');\n    }\n    try {\n      await authService.saveOpportunity(opportunityId);\n      const profileResponse = await authService.getCurrentUser();\n      if (profileResponse.status === 200) {\n        setUserData(profileResponse.data);\n      }\n      return true;\n    } catch (error) {\n      console.error('Save opportunity error:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setIsAuthenticated(false);\n    setUserType(null);\n    setUserData(null);\n  };\n\n  // Calculate isAdmin and isUser properties\n  const isAdmin = userType === 'admin';\n  const isUser = userType === 'user';\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      isAuthenticated,\n      userType,\n      userData,\n      isLoading,\n      isAdmin,\n      isUser,\n      login,\n      logout,\n      register,\n      updateProfile,\n      saveEvent,\n      saveOpportunity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"gs9lJgWo91SlZMTdB6p5aMfwvZU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","userType","setUserType","userData","setUserData","JSON","parse","isLoading","setIsLoading","setItem","removeItem","stringify","fetchUserProfile","response","getCurrentUser","status","data","error","console","login","usernameOrEmail","password","access_token","user_type","profileResponse","username","Error","register","email","fullName","full_name","updateProfile","updateData","saveEvent","eventId","saveOpportunity","opportunityId","logout","isAdmin","isUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/lokesh/indeedforresearch.real/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authService } from '../services/api';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(!!token);\n  const [userType, setUserType] = useState(localStorage.getItem('userType') || null);\n  const [userData, setUserData] = useState(JSON.parse(localStorage.getItem('userData')) || null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (token) {\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n    } else {\n      localStorage.removeItem('token');\n      localStorage.removeItem('userType');\n      localStorage.removeItem('userData');\n      setIsAuthenticated(false);\n      setUserType(null);\n      setUserData(null);\n    }\n  }, [token]);\n\n  useEffect(() => {\n    if (userType) {\n      localStorage.setItem('userType', userType);\n    }\n  }, [userType]);\n\n  useEffect(() => {\n    if (userData) {\n      localStorage.setItem('userData', JSON.stringify(userData));\n    }\n  }, [userData]);\n\n  // Load user profile when authenticated\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (isAuthenticated && userType === 'user' && token) {\n        try {\n          const response = await authService.getCurrentUser();\n          if (response.status === 200) {\n            setUserData(response.data);\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      }\n    };\n\n    fetchUserProfile();\n  }, [isAuthenticated, userType, token]);\n\n  const login = async (usernameOrEmail, password) => {\n    setIsLoading(true);\n    try {\n      const response = await authService.login(usernameOrEmail, password);\n      \n      const data = response.data;\n      if (data.access_token) {\n        setToken(data.access_token);\n        setUserType(data.user_type);\n        \n        // If user, fetch profile data\n        if (data.user_type === 'user') {\n          const profileResponse = await authService.getCurrentUser();\n          if (profileResponse.status === 200) {\n            setUserData(profileResponse.data);\n          }\n        } else {\n          // For admin, just store basic info\n          setUserData({ username: data.username });\n        }\n        \n        setIsAuthenticated(true);\n        setIsLoading(false);\n        return true;\n      }\n      \n      throw new Error('No access token received');\n    } catch (error) {\n      console.error('Login error:', error);\n      setIsLoading(false);\n      throw error;\n    }\n  };\n\n  const register = async (email, username, password, fullName) => {\n    setIsLoading(true);\n    try {\n      const userData = {\n        email,\n        username,\n        password,\n        full_name: fullName\n      };\n      \n      const response = await authService.register(userData);\n      setIsLoading(false);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      setIsLoading(false);\n      throw error;\n    }\n  };\n\n  const updateProfile = async (updateData) => {\n    setIsLoading(true);\n    try {\n      const response = await authService.updateProfile(updateData);\n      if (response.status === 200) {\n        setUserData(response.data);\n        setIsLoading(false);\n        return response.data;\n      }\n      throw new Error('Profile update failed');\n    } catch (error) {\n      console.error('Profile update error:', error);\n      setIsLoading(false);\n      throw error;\n    }\n  };\n\n  const saveEvent = async (eventId) => {\n    if (!isAuthenticated || !token || userType !== 'user') {\n      throw new Error('Not authenticated as user');\n    }\n    \n    try {\n      await authService.saveEvent(eventId);\n      const profileResponse = await authService.getCurrentUser();\n      if (profileResponse.status === 200) {\n        setUserData(profileResponse.data);\n      }\n      return true;\n    } catch (error) {\n      console.error('Save event error:', error);\n      throw error;\n    }\n  };\n\n  const saveOpportunity = async (opportunityId) => {\n    if (!isAuthenticated || !token || userType !== 'user') {\n      throw new Error('Not authenticated as user');\n    }\n    \n    try {\n      await authService.saveOpportunity(opportunityId);\n      const profileResponse = await authService.getCurrentUser();\n      if (profileResponse.status === 200) {\n        setUserData(profileResponse.data);\n      }\n      return true;\n    } catch (error) {\n      console.error('Save opportunity error:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setToken(null);\n    setIsAuthenticated(false);\n    setUserType(null);\n    setUserData(null);\n  };\n\n  // Calculate isAdmin and isUser properties\n  const isAdmin = userType === 'admin';\n  const isUser = userType === 'user';\n\n  return (\n    <AuthContext.Provider\n      value={{\n        token,\n        isAuthenticated,\n        userType,\n        userData,\n        isLoading,\n        isAdmin,\n        isUser,\n        login,\n        logout,\n        register,\n        updateProfile,\n        saveEvent,\n        saveOpportunity,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}