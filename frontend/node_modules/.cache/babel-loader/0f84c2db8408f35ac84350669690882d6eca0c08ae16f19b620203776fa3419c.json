{"ast":null,"code":"var _jsxFileName = \"/Users/lokesh/indeedforresearch.real/frontend/src/contexts/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(!!token);\n  const [userType, setUserType] = useState(localStorage.getItem('userType') || null);\n  const [userData, setUserData] = useState(JSON.parse(localStorage.getItem('userData')) || null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (token) {\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n    } else {\n      localStorage.removeItem('token');\n      localStorage.removeItem('userType');\n      localStorage.removeItem('userData');\n      setIsAuthenticated(false);\n      setUserType(null);\n      setUserData(null);\n    }\n  }, [token]);\n  useEffect(() => {\n    if (userType) {\n      localStorage.setItem('userType', userType);\n    }\n  }, [userType]);\n  useEffect(() => {\n    if (userData) {\n      localStorage.setItem('userData', JSON.stringify(userData));\n    }\n  }, [userData]);\n\n  // Load user profile when authenticated\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (isAuthenticated && userType === 'user' && token) {\n        try {\n          const response = await fetch('http://localhost:8000/users/me', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          if (response.ok) {\n            const data = await response.json();\n            setUserData(data);\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      }\n    };\n    fetchUserProfile();\n  }, [isAuthenticated, userType, token]);\n  const login = async (usernameOrEmail, password) => {\n    setIsLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append('username', usernameOrEmail);\n      formData.append('password', password);\n      const response = await fetch('http://localhost:8000/token', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      const data = await response.json();\n      if (data.access_token) {\n        setToken(data.access_token);\n        setUserType(data.user_type);\n\n        // If user, fetch profile data\n        if (data.user_type === 'user') {\n          const profileResponse = await fetch('http://localhost:8000/users/me', {\n            headers: {\n              'Authorization': `Bearer ${data.access_token}`\n            }\n          });\n          if (profileResponse.ok) {\n            const profileData = await profileResponse.json();\n            setUserData(profileData);\n          }\n        } else {\n          // For admin, just store basic info\n          setUserData({\n            username: data.username\n          });\n        }\n        setIsAuthenticated(true);\n        return true;\n      } else {\n        throw new Error('No access token received');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      setIsAuthenticated(false);\n      setToken(null);\n      setUserType(null);\n      setUserData(null);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async (email, username, password, fullName) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/users/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          username,\n          password,\n          full_name: fullName\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Registration failed');\n      }\n      const userData = await response.json();\n\n      // Automatically log in after successful registration\n      return await login(username, password);\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const updateProfile = async updateData => {\n    if (!isAuthenticated || !token) {\n      throw new Error('Not authenticated');\n    }\n    try {\n      const response = await fetch('http://localhost:8000/users/me', {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updateData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Profile update failed');\n      }\n      const updatedUserData = await response.json();\n      setUserData(updatedUserData);\n      return updatedUserData;\n    } catch (error) {\n      console.error('Profile update error:', error);\n      throw error;\n    }\n  };\n  const saveEvent = async eventId => {\n    if (!isAuthenticated || !token || userType !== 'user') {\n      throw new Error('Not authenticated as user');\n    }\n    try {\n      const response = await fetch(`http://localhost:8000/users/me/save-event/${eventId}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to save event');\n      }\n\n      // Refresh user data to get updated saved events\n      const profileResponse = await fetch('http://localhost:8000/users/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (profileResponse.ok) {\n        const profileData = await profileResponse.json();\n        setUserData(profileData);\n      }\n      return true;\n    } catch (error) {\n      console.error('Save event error:', error);\n      throw error;\n    }\n  };\n  const saveOpportunity = async opportunityId => {\n    if (!isAuthenticated || !token || userType !== 'user') {\n      throw new Error('Not authenticated as user');\n    }\n    try {\n      const response = await fetch(`http://localhost:8000/users/me/save-opportunity/${opportunityId}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to save opportunity');\n      }\n\n      // Refresh user data to get updated saved opportunities\n      const profileResponse = await fetch('http://localhost:8000/users/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (profileResponse.ok) {\n        const profileData = await profileResponse.json();\n        setUserData(profileData);\n      }\n      return true;\n    } catch (error) {\n      console.error('Save opportunity error:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setIsAuthenticated(false);\n    setUserType(null);\n    setUserData(null);\n  };\n\n  // Calculate isAdmin and isUser properties\n  const isAdmin = userType === 'admin';\n  const isUser = userType === 'user';\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      isAuthenticated,\n      userType,\n      userData,\n      isLoading,\n      isAdmin,\n      isUser,\n      login,\n      logout,\n      register,\n      updateProfile,\n      saveEvent,\n      saveOpportunity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"gs9lJgWo91SlZMTdB6p5aMfwvZU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","userType","setUserType","userData","setUserData","JSON","parse","isLoading","setIsLoading","setItem","removeItem","stringify","fetchUserProfile","response","fetch","headers","ok","data","json","error","console","login","usernameOrEmail","password","formData","FormData","append","method","body","Error","access_token","user_type","profileResponse","profileData","username","register","email","fullName","full_name","errorData","detail","updateProfile","updateData","updatedUserData","saveEvent","eventId","saveOpportunity","opportunityId","logout","isAdmin","isUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/lokesh/indeedforresearch.real/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(!!token);\n  const [userType, setUserType] = useState(localStorage.getItem('userType') || null);\n  const [userData, setUserData] = useState(JSON.parse(localStorage.getItem('userData')) || null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (token) {\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n    } else {\n      localStorage.removeItem('token');\n      localStorage.removeItem('userType');\n      localStorage.removeItem('userData');\n      setIsAuthenticated(false);\n      setUserType(null);\n      setUserData(null);\n    }\n  }, [token]);\n\n  useEffect(() => {\n    if (userType) {\n      localStorage.setItem('userType', userType);\n    }\n  }, [userType]);\n\n  useEffect(() => {\n    if (userData) {\n      localStorage.setItem('userData', JSON.stringify(userData));\n    }\n  }, [userData]);\n\n  // Load user profile when authenticated\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (isAuthenticated && userType === 'user' && token) {\n        try {\n          const response = await fetch('http://localhost:8000/users/me', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          \n          if (response.ok) {\n            const data = await response.json();\n            setUserData(data);\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      }\n    };\n\n    fetchUserProfile();\n  }, [isAuthenticated, userType, token]);\n\n  const login = async (usernameOrEmail, password) => {\n    setIsLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append('username', usernameOrEmail);\n      formData.append('password', password);\n\n      const response = await fetch('http://localhost:8000/token', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n\n      const data = await response.json();\n      if (data.access_token) {\n        setToken(data.access_token);\n        setUserType(data.user_type);\n        \n        // If user, fetch profile data\n        if (data.user_type === 'user') {\n          const profileResponse = await fetch('http://localhost:8000/users/me', {\n            headers: {\n              'Authorization': `Bearer ${data.access_token}`\n            }\n          });\n          \n          if (profileResponse.ok) {\n            const profileData = await profileResponse.json();\n            setUserData(profileData);\n          }\n        } else {\n          // For admin, just store basic info\n          setUserData({ username: data.username });\n        }\n        \n        setIsAuthenticated(true);\n        return true;\n      } else {\n        throw new Error('No access token received');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      setIsAuthenticated(false);\n      setToken(null);\n      setUserType(null);\n      setUserData(null);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (email, username, password, fullName) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/users/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email,\n          username,\n          password,\n          full_name: fullName,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Registration failed');\n      }\n\n      const userData = await response.json();\n      \n      // Automatically log in after successful registration\n      return await login(username, password);\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateProfile = async (updateData) => {\n    if (!isAuthenticated || !token) {\n      throw new Error('Not authenticated');\n    }\n\n    try {\n      const response = await fetch('http://localhost:8000/users/me', {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Profile update failed');\n      }\n\n      const updatedUserData = await response.json();\n      setUserData(updatedUserData);\n      return updatedUserData;\n    } catch (error) {\n      console.error('Profile update error:', error);\n      throw error;\n    }\n  };\n\n  const saveEvent = async (eventId) => {\n    if (!isAuthenticated || !token || userType !== 'user') {\n      throw new Error('Not authenticated as user');\n    }\n\n    try {\n      const response = await fetch(`http://localhost:8000/users/me/save-event/${eventId}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save event');\n      }\n\n      // Refresh user data to get updated saved events\n      const profileResponse = await fetch('http://localhost:8000/users/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (profileResponse.ok) {\n        const profileData = await profileResponse.json();\n        setUserData(profileData);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Save event error:', error);\n      throw error;\n    }\n  };\n\n  const saveOpportunity = async (opportunityId) => {\n    if (!isAuthenticated || !token || userType !== 'user') {\n      throw new Error('Not authenticated as user');\n    }\n\n    try {\n      const response = await fetch(`http://localhost:8000/users/me/save-opportunity/${opportunityId}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save opportunity');\n      }\n\n      // Refresh user data to get updated saved opportunities\n      const profileResponse = await fetch('http://localhost:8000/users/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (profileResponse.ok) {\n        const profileData = await profileResponse.json();\n        setUserData(profileData);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Save opportunity error:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setToken(null);\n    setIsAuthenticated(false);\n    setUserType(null);\n    setUserData(null);\n  };\n\n  // Calculate isAdmin and isUser properties\n  const isAdmin = userType === 'admin';\n  const isUser = userType === 'user';\n\n  return (\n    <AuthContext.Provider\n      value={{\n        token,\n        isAuthenticated,\n        userType,\n        userData,\n        isLoading,\n        isAdmin,\n        isUser,\n        login,\n        logout,\n        register,\n        updateProfile,\n        saveEvent,\n        saveOpportunity,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}